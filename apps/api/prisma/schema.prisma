generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  locationId  Int
  startDate   DateTime
  endDate     DateTime
  price       Float
  limit       Int
  booked      Int      @default(0)
  thumbnail   String
  userId      Int
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt

  location       Location         @relation(fields: [locationId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  Event_category Event_category[]
}

model Location {
  id        Int      @id @default(autoincrement())
  city      String
  country   String
  createdAt DateTime @default(now())
  Event     Event[]
}

model Event_category {
  id         Int      @id @default(autoincrement())
  categoryId Int
  eventId    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  event    Event    @relation(fields: [eventId], references: [id])
}

model Category {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  isDeleted      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Event_category Event_category[]
}

model User {
  id           Int             @id @default(autoincrement())
  first_name   String
  last_name    String
  username     String          @unique
  password     String
  email        String          @unique
  contact      String          @default("62")
  address      String
  codeReferall String          @unique
  updatedAt    DateTime        @updatedAt
  createdAt    DateTime        @default(now())
  isDeleted    Boolean         @default(false)
  roleId       Int // Assuming a foreign key to Role table
  Voucher      Voucher[]
  MyVoucher    MyVoucher[]
  Role         Role            @relation(fields: [roleId], references: [id])
  Event        Event[]
  CouponUser   CouponUser[]
  referrerUser PointReferall[] @relation("Referrer")
}

model Role {
  id        Int      @id @default(autoincrement())
  roleName  String
  users     User[]
  createdAt DateTime @default(now())
}

model CouponUser {
  id                 Int      @id @default(autoincrement())
  userId             Int
  couponCode         String
  discountPersentase Int
  dateReceived       DateTime @default(now())
  expiresOn          DateTime

  User User @relation(fields: [userId], references: [id])
}

model PointReferall {
  id             Int      @id @default(autoincrement())
  referrerUserId Int
  referredUserId Int      @unique
  pointEarned    Int
  dateEarned     DateTime @default(now())
  expiresOn      DateTime
  referrerUser   User     @relation("Referrer", fields: [referrerUserId], references: [id])
}

model Voucher {
  id                 Int         @id @default(autoincrement())
  nameVoucher        String
  // eventId            Int
  userId             Int
  discountPercentage Int
  createAt           DateTime    @default(now())
  updateAt           DateTime    @updatedAt
  useVoucher         Boolean     @default(false)
  // Relationships
  user               User        @relation(fields: [userId], references: [id])
  MyVoucher          MyVoucher[]
}

model ClaimVoucher {
  id              Int      @id @default(autoincrement())
  transactionDate DateTime
  myVoucherId     Int

  // Relationships
  myVoucher MyVoucher @relation(fields: [myVoucherId], references: [id])
}

model MyVoucher {
  id          Int      @id @default(autoincrement())
  voucherId   Int
  userId      Int
  expiredDate DateTime

  // Relationships
  voucher      Voucher        @relation(fields: [voucherId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  ClaimVoucher ClaimVoucher[]
}
