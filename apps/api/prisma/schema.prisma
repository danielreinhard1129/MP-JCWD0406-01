generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model claimvoucher {
  id              Int       @id @default(autoincrement())
  transactionDate DateTime
  myVoucherId     Int
  myvoucher       myvoucher @relation(fields: [myVoucherId], references: [id], map: "ClaimVoucher_myVoucherId_fkey")

  @@index([myVoucherId], map: "ClaimVoucher_myVoucherId_fkey")
}

model event {
  id          Int        @id @default(autoincrement())
  event_name  String
  price       Int
  location    String
  description String
  avaibleSeat Int
  banner      String
  category    String
  userId      Int
  dateTime    DateTime
  createdAt   DateTime   @default(now())
  updateAt    DateTime
  user        user       @relation(fields: [userId], references: [id], map: "Event_userId_fkey")
  eventcat    eventcat[]

  @@index([userId], map: "Event_userId_fkey")
}

model eventcat {
  id         Int   @id @default(autoincrement())
  categoryId Int
  eventId    Int
  event      event @relation(fields: [eventId], references: [id], onDelete: Cascade, map: "EventCat_eventId_fkey")

  @@index([eventId], map: "EventCat_eventId_fkey")
}

model myvoucher {
  id           Int            @id @default(autoincrement())
  voucherId    Int
  userId       Int
  expiredDate  DateTime
  claimvoucher claimvoucher[]
  user         user           @relation(fields: [userId], references: [id], map: "MyVoucher_userId_fkey")
  voucher      voucher        @relation(fields: [voucherId], references: [id], map: "MyVoucher_voucherId_fkey")

  @@index([userId], map: "MyVoucher_userId_fkey")
  @@index([voucherId], map: "MyVoucher_voucherId_fkey")
}

model prize {
  id     Int    @id @default(autoincrement())
  name   String
  points Int
}

model role {
  id        Int      @id @default(autoincrement())
  roleName  String
  createdAt DateTime @default(now())
  user      user[]
}

model user {
  id             Int           @id @default(autoincrement())
  first_name     String
  last_name      String
  username       String        @unique(map: "User_username_key")
  password       String
  email          String        @unique(map: "User_email_key")
  contact        String
  address        String
  codeReferall   String
  updatedAt      DateTime
  createdAt      DateTime      @default(now())
  roleId         Int
  userReferallId Int?
  event          event[]
  myvoucher      myvoucher[]
  role           role          @relation(fields: [roleId], references: [id], map: "User_roleId_fkey")
  userreferall   userreferall? @relation(fields: [userReferallId], references: [id], map: "User_userReferallId_fkey")
  voucher        voucher[]

  @@index([roleId], map: "User_roleId_fkey")
  @@index([userReferallId], map: "User_userReferallId_fkey")
}

model userreferall {
  id         Int      @id @default(autoincrement())
  referallid Int
  createdAt  DateTime @default(now())
  user       user[]
}

model voucher {
  id                 Int         @id @default(autoincrement())
  nameVoucher        String
  eventId            Int
  userId             Int
  discountPercentage Float
  startDate          DateTime
  endDate            DateTime
  myvoucher          myvoucher[]
  user               user        @relation(fields: [userId], references: [id], map: "Voucher_userId_fkey")

  @@index([userId], map: "Voucher_userId_fkey")
}
